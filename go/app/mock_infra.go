// Code generated by MockGen. DO NOT EDIT.
// Source: app/infra.go

// Package app is a generated GoMock package.
package app

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockItemRepository is a mock of ItemRepository interface.
type MockItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryMockRecorder
}

// MockItemRepositoryMockRecorder is the mock recorder for MockItemRepository.
type MockItemRepositoryMockRecorder struct {
	mock *MockItemRepository
}

// NewMockItemRepository creates a new mock instance.
func NewMockItemRepository(ctrl *gomock.Controller) *MockItemRepository {
	mock := &MockItemRepository{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepository) EXPECT() *MockItemRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockItemRepository) Insert(ctx context.Context, item *Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockItemRepositoryMockRecorder) Insert(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockItemRepository)(nil).Insert), ctx, item)
}

// LoadItems mocks base method.
func (m *MockItemRepository) LoadItems(ctx context.Context) ([]*Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadItems", ctx)
	ret0, _ := ret[0].([]*Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadItems indicates an expected call of LoadItems.
func (mr *MockItemRepositoryMockRecorder) LoadItems(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadItems", reflect.TypeOf((*MockItemRepository)(nil).LoadItems), ctx)
}

// SearchItems mocks base method.
func (m *MockItemRepository) SearchItems(ctx context.Context, keyword string) ([]*Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchItems", ctx, keyword)
	ret0, _ := ret[0].([]*Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchItems indicates an expected call of SearchItems.
func (mr *MockItemRepositoryMockRecorder) SearchItems(ctx, keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchItems", reflect.TypeOf((*MockItemRepository)(nil).SearchItems), ctx, keyword)
}
